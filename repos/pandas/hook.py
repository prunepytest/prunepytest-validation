from typing import AbstractSet, Mapping

from prunepytest.api import DefaultHook

class PandasPruneHook(DefaultHook):
    def external_imports(self) -> AbstractSet[str]:
        return frozenset({
            # we need to keep track of pyarrow imports
            # because pyarrow dynamically imports pandas.api.internals
            "pyarrow",

            # these are "external" in the sense that they're
            # native / autogenerated and do not have corresponding *.pyi
            # c source files, turned into native module by meson
            "pandas._libs.pandas_datetime",
            "pandas._libs.pandas_parser",

            # autogenerated by meson build
            "pandas._version_meson",
        })

    def dynamic_dependencies(self) -> Mapping[str, AbstractSet[str]]:
        return {
            # le sigh...
            "pyarrow": {"pandas.api.internals"},

            # not actually dynamic, just hiding inside Cython code
            # and not advertised in type hints
            # these can be removed once prunepytest extracts import from *.pyx files
            "pandas._libs.tslibs": {"pandas._libs.tslibs.base"},
            "pandas._libs.tslib": {"pandas._libs.tslibs"},
            "pandas._libs.lib": {"pandas._libs.tslibs"},
        }

    def filter_irrelevant_files(self, files: AbstractSet[str]) -> AbstractSet[str]:
        return {
            f for f in files
            if not (
                f.startswith("doc/") or f.startswith("web/")
            )
        }
